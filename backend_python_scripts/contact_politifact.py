import requests
import re


def query_politifact(terms):
    """
    Searches politifact for certain words and returns the search page in raw html
    
    Parameters:
    ==========
    terms : array of strings. e.g [Sanders, Economy, Debt]

    Returns:
    ==========
    page_content: str, string of raw html
    """

    term_string = '+'.join(terms)
    url = 'http://www.politifact.com/search/statements/?q=%s' % term_string
    page = requests.get(url)
    return page.content


def gather_search_items(the_page):
    """
    Takes raw html and finds the search elements:
    ==========
    the_page : raw html text generated by query_politifact

    Returns:
    ==========
    search_items : array of strings where each string is a statement evaluated by politifact

    """
    search_items = the_page.split('search-results__item')
    search_items = search_items[1:]
    ind = search_items[-1].index('</li>')
    search_items[-1] = search_items[-1][:ind]
    return search_items


def digest_search_item(item):
    """
    Takes raw html search item generated by gather_search_items and returns features of search items
    Parameters:
    ==========
    item : raw html string search element

    Returns:
    ==========
    search_item_vars : dict, dictionary of all of the features of the search page.
    Fields are:
        date : day when statement was made
        img_url : link to image of politifact meter showing truth value
        meter_link : link to politifact page about this statement
        person: person who made statement
        quote : statement that was made
        truth_value : Truth value of statement

    """
    search_item_vars = dict()

    #find meter_link to article in text
    start_ind = item.index('a href=')+7
    end_ind = item[start_ind:].index('>')
    search_item_vars['meter_link'] = item[start_ind:start_ind+end_ind]

    #step forward
    item = item[start_ind+end_ind:]

    # get image url
    search_item_vars['img_url'] = item[item.index('src=')+4:item.index('alt')]

    #step forward
    item = item[end_ind:]

    search_item_vars['truth_value'] = item[3:item.index('Sort order')-2]

    #step forward
    item = item[4+item.index('Sort order')-1+4:]

    search_item_vars['date'] = item[item.index('<strong>')+8:item.index('</strong>')]

    #step forward
    item = item[item.index('</strong>'):]

    unparsed_quote = item[item.index('">'):item.index('</a>')-1]
    search_item_vars['quote'] = re.sub("&quot.","", unparsed_quote)

    #somtimes there are weird spaces in front of names of people/organizations
    un_parsed_person = item[item.index('&mdash')+8:item.index('</p')]
    search_item_vars['person'] = ' '.join([p for p in un_parsed_person.split(' ') if len(p)>1])
    return search_item_vars


if __name__ == "__main__":

    terms = ['clinton','iraq','2005']
    page = query_politifact(terms);
    search_items = gather_search_items(page);
    my_dict = digest_search_item(search_items[3])
    print my_dict.items()
